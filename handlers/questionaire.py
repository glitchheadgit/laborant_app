import io
import re
import bson
import pandas as pd

from io import StringIO

from aiogram.types import Message, BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram import Router, F

from utils.model import retrieve_table_from_text, analyze_table_with_gpt, getting_bioethic_response, diseases_check
from utils.preprocessing import read_pdf, read_docx
from utils.laborantdb import db_find_user_profile, db_create_file, db_analysis_inc
# from utils.preprocessing_1 import read_document
from config_reader import config
from utils.states import Form
from keyboards import reply
from keyboards.inline import create_file_rating


router = Router()

@router.message(Form.user_analyses, F.document.file_name.endswith('.pdf'))
async def process_pdf(message: Message, state: FSMContext):
    from bot import db
    await message.answer(
        'üìù –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –í–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã –∏ –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 3 –º–∏–Ω—É—Ç.',
    )
    file_id = message.document.file_id
    query = await db.files.count_documents({}) / 3 + 1
    #try:
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —á—Ç–µ–Ω–∏–µ PDF
    file = await message.bot.download(file_id)
    await db_create_file(db, message.from_user.id, 0, bson.Binary(file.read()), query)
    text = await read_pdf(file)
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    profile = await db_find_user_profile(db, message.from_user.id, user_data['name'])
    if profile['sex']:
        profile['sex'] = '–ú—É–∂—á–∏–Ω–∞'
    else:
        profile['sex'] = '–ñ–µ–Ω—â–∏–Ω–∞'

    table_text, table_text_deviation = await retrieve_table_from_text(text)
    await db_create_file(db, message.from_user.id, 2, table_text, query)

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è GPT-4
    formatter = {'age': profile['age'], 'sex': profile['sex'], 'table_text': table_text, 'table_text_deviation': table_text_deviation, 'diseases': profile['diseases']}
    
    prompt = config.prompt.get_secret_value().format(**formatter)

    analysis = await analyze_table_with_gpt(prompt)
    bioethic_response = await getting_bioethic_response(analysis)
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    analysis_id = await db_create_file(db, message.from_user.id, 3, bioethic_response, query)
    _ = await db_analysis_inc(db, message.from_user.id)
    keyboard = create_file_rating(analysis_id)

    # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    # await message.reply(
    #     f"–ò—Å—Ö–æ–¥–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:\n\n<pre><code>{table_text}</code></pre>",
    #     reply_markup=reply.main,
    #     parse_mode="HTML"
    # )

    # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ DataFrame
    # try:
    #     df = pd.read_csv(StringIO(table_text))
    #     # await message.reply(f"–°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã: {', '.join(df.columns)}", reply_markup=reply.main)
    # except Exception as e:
    #     pass # await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DataFrame: {str(e)}", reply_markup=reply.main)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞
    result = re.sub(r'<([^>]*)\n', r'&lt;\1', bioethic_response.replace('&', '&amp'))
    result = re.sub(r'\n([^<]*)>', r'\1&gt;', result)

    # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏–∏
    anal, rec = result.split('–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞—à–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</b>')
    rec = '–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞—à–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</b>' + rec

    await message.reply(
        f"{anal}",
        parse_mode="HTML",
        reply_markup=reply.main
    )
    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
    await message.reply(
        f"{rec}",
        parse_mode="HTML",
        reply_markup=keyboard
    )
   #  except Exception as e:
    #    await message.reply(
     #       f"<pre><code>–û—à–∏–±–∫–∞: {str(e).replace('&', '&amp').replace('<', '&lt;').replace('>', '&gt;')}</code></pre>",
      #      reply_markup=reply.main,
       #     parse_mode="HTML"
        #)


@router.message(Form.user_analyses, F.document.file_name.regexp('.*docx?'))
async def process_docx(message: Message, state: FSMContext):
    from bot import db
    await message.answer(
            '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É, –í–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è...',
    )
    file_id = message.document.file_id
    query = await db.files.count_documents({}) / 3 + 1
    try:
        file = await message.bot.download(file_id)
        await db_create_file(db, message.from_user.id, 1, bson.Binary(file.read()))
        text = await read_docx(file)
        user_data = await state.get_data()
        profile = await db_find_user_profile(db, message.from_user.id, user_data['name'])
        if profile['sex']:
            profile['sex'] = '–ú—É–∂—á–∏–Ω–∞'
        else:
            profile['sex'] = '–ñ–µ–Ω—â–∏–Ω–∞'

        table_text, table_text_deviation = await retrieve_table_from_text(text)
        await db_create_file(db, message.from_user.id, 2, table_text, query)

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è GPT-4
        formatter = {'age': profile['age'], 'sex': profile['sex'], 'table_text': table_text, 'table_text_deviation': table_text_deviation, 'diseases': profile['diseases']}

        prompt = config.prompt.get_secret_value().format(**formatter)

        analysis = await analyze_table_with_gpt(prompt)
        #—Ç—É—Ç –¥–æ–±–∞–≤–∏–ª –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –∏ –ø–æ—Å–ª–µ –Ω–µ–µ –≤ —Ä–µ–∑–∞–ª—Ç —Ç–µ–ø–µ—Ä—å –±–∏–æ—ç—Ç–∏–∫ —Ä–µ—Å–ø–æ–Ω—Å
        bioethic_response = await getting_bioethic_response(analysis)

        analysis_id = await db_create_file(db, message.from_user.id, 3, bioethic_response, query)
        _ = await db_analysis_inc(db, message.from_user.id)
        keyboard = create_file_rating(analysis_id)


        result = re.sub(r'<([^>]*)\n', r'&lt;\1', bioethic_response.replace('&', '&amp'))
        result = re.sub(r'\n([^<]*)>', r'\1&gt;', result)
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –∏ —Ä–µ–∫–æ–º–º–µ–Ω–¥–∞—Ü–∏–∏
        anal, rec = result.split('–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞—à–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</b>')
        rec = '–ù–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤–∞—à–∏—Ö –∞–Ω–∞–ª–∏–∑–æ–≤ –º—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ–º —Å–ª–µ–¥—É—é—â–∏–µ <b>–¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è:</b>' + rec

        await message.reply(
            f"{anal}",
            parse_mode="HTML",
            reply_markup=reply.main
        )
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
        await message.reply(
            f"{rec}",
            parse_mode="HTML",
            reply_markup=keyboard
        )
    except Exception as e:
        await message.reply(
            '<pre><code>' + str(e).replace('&', '&amp').replace('<', '&lt;').replace('>', '&gt;') + '</code></pre>',
        )

@router.message(Form.user_analyses, ~F.document.file_name.regexp(r'.*.pdf|.*.docx?'))
async def wrong_format_handler(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å":
        await state.clear()
        await message.answer("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–¥–æ–∫—É–º–µ–Ω—Ç</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>pdf</b>!")
