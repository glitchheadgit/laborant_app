import io
import pandas as pd

from io import StringIO

from aiogram import Router, F
from aiogram.types import Message, BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext

from config_reader import config
from utils.states import Form
from utils.model import retrieve_table_from_text, analyze_table_with_gpt
from utils.preprocessing import read_docx, read_pdf, save_data
from keyboards import reply


router = Router()


@router.message(F.text.in_(["/analysis", "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑"]))
async def get_photo(message: Message, state: FSMContext):
    await state.set_state(Form.user_analyses)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ <b>PDF</b> –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–æ–≤", reply_markup=reply.cancel)


@router.message(Form.user_analyses, F.document.file_name.endswith('.pdf'))
async def process_pdf(message: Message, state: FSMContext):
    await message.answer(
        'üìù –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –í–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã –∏ –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 3 –º–∏–Ω—É—Ç.',
    )
    file_id = message.document.file_id
    #try:
    # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —á—Ç–µ–Ω–∏–µ PDF
    file = await message.bot.download(file_id)
    text = read_pdf(file)
    
    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    table_text, table_text_deviation = retrieve_table_from_text(text)
    print(table_text, table_text_deviation, sep='\n\n')
    
    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è GPT-4
    formatter = {'age': user_data['age'], 'sex': user_data['sex'], 'table_text': table_text, 'table_text_deviation': table_text_deviation}
    prompt = config.prompt.get_secret_value().format(**formatter)
    analyses = analyze_table_with_gpt(prompt)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    save_data(message.chat.id, user_data['age'], user_data['sex'], table_text, analyses)

    # –û—Ç–ª–∞–¥–∫–∞: –≤—ã–≤–æ–¥–∏–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –∏—Å—Ö–æ–¥–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã
    # await message.reply(
    #     f"–ò—Å—Ö–æ–¥–Ω–∞—è —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:\n\n<pre><code>{table_text}</code></pre>",
    #     reply_markup=reply.main,
    #     parse_mode="HTML"
    # )

    # –ü—Ä–æ–±—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤ DataFrame
    try:
        df = pd.read_csv(StringIO(table_text))
        # await message.reply(f"–°—Ç–æ–ª–±—Ü—ã —Ç–∞–±–ª–∏—Ü—ã: {', '.join(df.columns)}", reply_markup=reply.main)
    except Exception as e:
        pass # await message.reply(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ DataFrame: {str(e)}", reply_markup=reply.main)

    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞–Ω–∞–ª–∏–∑–∞ –∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–π –¥–ª—è –≤—ã–≤–æ–¥–∞
    result = analyses.replace('&', '&amp').replace('<', '&lt;').replace('>', '&gt;')

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –∞–Ω–∞–ª–∏–∑–∞
    await message.reply(
        f"{result}",
        reply_markup=reply.main,
        parse_mode="HTML"
    )
   #  except Exception as e:
    #    await message.reply(
     #       f"<pre><code>–û—à–∏–±–∫–∞: {str(e).replace('&', '&amp').replace('<', '&lt;').replace('>', '&gt;')}</code></pre>",
      #      reply_markup=reply.main,
       #     parse_mode="HTML"
        #)


@router.message(Form.user_analyses, F.document.file_name.regexp('.*docx?'))
async def process_docx(message: Message, state: FSMContext):
    await message.answer(
            '–ü–æ–¥–æ–∂–¥–∏—Ç–µ –º–∏–Ω—É—Ç—É, –í–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—é—Ç—Å—è...',
    )
    file_id = message.document.file_id
    try:
        file = await message.bot.download(file_id)
        text = read_docx(file)
        table_text, table_text_deviation = retrieve_table_from_text(text)
        formatter = {'age': user_data['age'], 'sex': user_data['sex'], 'table_text': table_text, 'table_text_deviation': table_text_deviation}
        prompt = config.prompt.get_secret_value().format(**formatter)
        analyses = analyze_table_with_gpt(prompt)
        save_data(message.chat.id, user_data['age'], user_data['sex'], table_text, analyses)
        result =  analyses.replace('&', '&amp').replace('<', '&lt;').replace('>', '&gt;')
        await message.reply(
            '<pre><code>' + analyses + '</code></pre>',
            reply_markup=reply.main,
        )
        await message.reply(
            result,
            reply_markup=reply.main,
        )
    except Exception as e:
        await message.reply(
            '<pre><code>' + str(e).replace('&', '&amp').replace('<', '&lt;').replace('>', '&gt;') + '</code></pre>',
            reply_markup=reply.main
        )

@router.message(F.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
async def process_start_command(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!", reply_markup=reply.main)

@router.message(Form.user_analyses, ~F.document.file_name.regexp(r'.*.pdf|.*.docx?'))
async def wrong_format_handler(message: Message, state: FSMContext):
    if message.text == "–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å":
        await state.clear()
        await message.answer("–ß–µ–≥–æ –∂–µ–ª–∞–µ—Ç–µ?", reply_markup=reply.main)
    else:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ <b>–¥–æ–∫—É–º–µ–Ω—Ç</b> –≤ —Ñ–æ—Ä–º–∞—Ç–µ <b>pdf</b>!")
