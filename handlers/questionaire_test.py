import io
import pandas as pd

from io import StringIO

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext

from config_reader import config
from utils.states import Form
from utils.model import retrieve_table_from_text, analyze_table_with_gpt
from utils.preprocessing import save_data
from utils.preprocessing_1 import read_document
from keyboards import reply

router = Router()

# –®–∞–≥ 1: –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ PDF
@router.message(F.text.in_(["/analysis", "–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å –∞–Ω–∞–ª–∏–∑"]))
async def get_photo(message: Message, state: FSMContext):
    await state.set_state(Form.user_analyses)
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ <b>PDF</b> –¥–æ–∫—É–º–µ–Ω—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –∞–Ω–∞–ª–∏–∑–æ–≤", reply_markup=reply.cancel)

# –®–∞–≥ 2: –û–±—Ä–∞–±–æ—Ç–∫–∞ PDF
@router.message(Form.user_analyses, F.document.file_name.endswith('.pdf'))
async def process_pdf(message: Message, state: FSMContext):
    await message.answer(
        'üìù –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –í–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã –∏ –ø—Ä–∏—Å—Ç—É–ø–∏–ª–∏ –∫ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n\n‚è≥ –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ –±–æ–ª–µ–µ 3 –º–∏–Ω—É—Ç.',
    )
    file_id = message.document.file_id
    file = await message.bot.download(file_id)
    text = read_document(file)

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data = await state.get_data()
    table_text, table_text_deviation = retrieve_table_from_text(text)

    # –®–∞–≥ 3: –í—ã–≤–æ–¥ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ –≤–æ–ø—Ä–æ—Å –æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç–∏
    await state.update_data(table_text=table_text)
    await ask_for_table_verification(message, table_text)

# –®–∞–≥ 3.1: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–≤–æ–¥–∞ —Ç–∞–±–ª–∏—Ü—ã –∏ –∫–Ω–æ–ø–æ–∫
async def ask_for_table_verification(message: Message, table_text: str):
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–î–∞", callback_data="correct_table")],
        [InlineKeyboardButton(text="–ù–µ—Ç", callback_data="incorrect_table")]
    ])
    await message.answer(
        f"–†–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞:\n\n<pre><code>{table_text}</code></pre>\n\n–ü—Ä–∞–≤–∏–ª—å–Ω–æ –ª–∏ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏?",
        reply_markup=keyboard,
        parse_mode="HTML"
    )

# –®–∞–≥ 4: –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å —Ç–∞–±–ª–∏—Ü—ã
@router.callback_query(F.data == "correct_table")
async def table_correct(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–û—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.")
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    table_text = data['table_text']
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è GPT-4 –∏ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    user_data = await state.get_data()
    formatter = {'age': user_data['age'], 'sex': user_data['sex'], 'table_text': table_text, 'table_text_deviation': ""}
    prompt = config.prompt.get_secret_value().format(**formatter)
    analyses = analyze_table_with_gpt(prompt)
    
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    save_data(call.message.chat.id, user_data['age'], user_data['sex'], table_text, analyses)

    await call.message.answer("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω.")
    await call.answer()

@router.callback_query(F.data == "incorrect_table")
async def table_incorrect(call: CallbackQuery, state: FSMContext):
    await call.message.answer("–£–∫–∞–∂–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∑–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ.")
    await state.set_state(Form.incorrect_table_names)

# –®–∞–≥ 5: –í–≤–æ–¥ –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
@router.message(Form.incorrect_table_names)
async def incorrect_table_names(message: Message, state: FSMContext):
    incorrect_names = message.text.split(",")  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
    await state.update_data(incorrect_names=incorrect_names)
    await message.answer("–£–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –Ω–µ–≤–µ—Ä–Ω–æ–≥–æ –ø–æ–∫–∞–∑–∞—Ç–µ–ª—è —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É.")
    await state.set_state(Form.correct_table_values)

# –®–∞–≥ 6: –í–≤–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –¥–ª—è –Ω–µ–≤–µ—Ä–Ω—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π
@router.message(Form.correct_table_values)
async def correct_table_values(message: Message, state: FSMContext):
    correct_values = message.text.split(",")  # –ü—Ä–∞–≤–∏–ª—å–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é —Å —Ç–æ—á–∫–æ–π –∫–∞–∫ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å
    data = await state.get_data()
    incorrect_names = data['incorrect_names']

    # –®–∞–≥ 7: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã
    table_text = data['table_text']
    table_lines = table_text.split("\n")
    updated_lines = []

    for line in table_lines:
        for incorrect, correct in zip(incorrect_names, correct_values):
            if incorrect in line:
                line = line.replace(incorrect, correct)
        updated_lines.append(line)

    updated_table = "\n".join(updated_lines)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü—ã –∏ –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await state.update_data(table_text=updated_table)
    await message.answer("–¢–∞–±–ª–∏—Ü–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É.")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É –∑–∞–Ω–æ–≤–æ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–π —Ç–∞–±–ª–∏—Ü–µ–π
    await ask_for_table_verification(message, updated_table)
